Metadata-Version: 2.4
Name: mfg-finance
Version: 0.1.0
Summary: Mean Field Games solver for financial market models coupling HJB and Fokker-Planck equations.
Author: Mean Field Games Team
License: MIT
Project-URL: Homepage, https://github.com/example/mfg-finance
Project-URL: Documentation, https://github.com/example/mfg-finance#readme
Project-URL: Issues, https://github.com/example/mfg-finance/issues
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.23
Requires-Dist: scipy>=1.9
Requires-Dist: matplotlib>=3.6
Requires-Dist: pyyaml>=6.0
Requires-Dist: tqdm>=4.64
Requires-Dist: pytest>=7.0

# mfg-finance

Implementacao em Python de um jogo de campo medio (Mean Field Game, MFG) para o mercado financeiro, acoplando a equacao de Hamilton-Jacobi-Bellman (HJB) a equacao de Fokker-Planck (FP) por meio de uma iteracao de Picard. O objetivo do projeto e fornecer um framework reprodutivel e modular, com esquemas numericos monotone (Lax-Friedrichs) para a HJB e discretizacao upwind conservativa para a FP.

## Comecando

### Requisitos

- Python 3.10 ou superior.
- Dependencias declaradas em `pyproject.toml` (`numpy`, `scipy`, `matplotlib`, `pyyaml`, `tqdm`, `pytest`).

### Instalacao

1. Clone o repositorio.
2. Entre no diretorio `mfg-finance/`.
3. Instale em modo desenvolvimento:

```bash
pip install -e .
```

### Executando uma simulacao (WIP)

Assim que os blocos numericos estiverem implementados, a simulacao podera ser iniciada com:

```bash
python -m mfg_finance.cli run --config configs/baseline.yaml
```

No estado atual, o comando apenas carrega a configuracao e informa que a rotina ainda nao foi implementada.

### Testes

Execute os testes com:

```bash
pytest -q
```

Os testes referentes aos esquemas numericos principais serao habilitados conforme as implementacoes forem concluidas.

## Estrutura do Projeto

- `src/mfg_finance/`: modulos de grade, operadores numericos, Hamiltonianas, solucionadores HJB/FP e orquestracao da iteracao de Picard.
- `configs/`: arquivos de configuracao YAML, incluindo `baseline.yaml`.
- `tests/`: suite de testes baseada em `pytest`.

## Qualidade de Codigo

Sugerimos a adocao de hooks `pre-commit` com ferramentas como `ruff` e `black` (nao configuradas por padrao). Para ativar, instale as dependencias desejadas e registre os hooks de sua preferencia.

## Licenca

MIT.
